syntax = "proto3";

package shortener;

option go_package = "github.com/kTowkA/shortener/internal/grpc/proto";
message BatchRequest{
  message BatchRequestElement {
    string correlation_id = 1 [json_name = "correlation_id"];
    string original_url = 2 [json_name = "original_url"];
  }
  repeated BatchRequestElement elements = 1;
}
message BatchResponse{
  message Result {
    string correlation_id = 1 [json_name = "correlation_id"];
    string short_url = 2 [json_name = "short_url"];
  }
  repeated Result result = 1;
}
message UserURLsRequest{
  string user_id = 1 [json_name = "user_id"];
}
message UserURLsResponse{
  message Result {
    string uuid = 1 [json_name = "uuid"];
    string short_url = 2 [json_name = "short_url"];
    string original_url = 3 [json_name = "original_url"];
    bool is_deleted = 4 [json_name = "is_deleted"];
  }
  repeated Result result = 1[json_name = "result"];
}
message DelUserRequest {
  repeated string short_urls = 1 [json_name = "short_urls"];
}
message DeleteUserURLsResponse { 
}
message PingRequest {
}
message PingResponse {
  message Status{
    bool ok = 1 [json_name = "ok"];
  }
  Status status = 1 [json_name = "status"];
}
message StatsRequest {
}
message StatsResponse {
    int32 users = 1 [json_name = "users"];
    int32 urls = 2 [json_name = "urls"];
}
message EncodeURLRequest{
  string original_url = 1 [json_name = "original_url"];
}
message EncodeURLResponse{
  string saved_link = 1 [json_name = "saved_link"];
  string error = 2 [json_name = "error"];
}
message DecodeURLRequest{
  string short_url = 1 [json_name = "short_url"];
}
message DecodeURLResponse{
  string original_url = 1 [json_name = "original_url"];
}
service Shortener {
  rpc EncodeURL(EncodeURLRequest) returns (EncodeURLResponse);
  rpc DecodeURL(DecodeURLRequest) returns (DecodeURLResponse);
  rpc Batch(BatchRequest) returns (BatchResponse);
  rpc UserURLs(UserURLsRequest) returns (UserURLsResponse);
  rpc DeleteUserURLs(DelUserRequest) returns (DeleteUserURLsResponse);
  rpc Stats(StatsRequest) returns (StatsResponse);
  rpc Ping(PingRequest) returns (PingResponse);
}